"""
Django settings for main_project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


from pathlib import Path
import os
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent

# React build directory
FRONTEND_DIR = BASE_DIR / 'reat_project' / 'build'

# Load .env from project root
load_dotenv(BASE_DIR / ".env")



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

CORS_ALLOW_CREDENTIALS = True

ALLOWED_HOSTS = [
    'tripleastechng.com',
    'www.tripleastechng.com',
    'crossover.proxy.rlwy.net',
    'localhost',
    '127.0.0.1',
]

CSRF_TRUSTED_ORIGINS = [
    'https://tripleastechng.com',
    'https://www.tripleastechng.com',
    'https://crossover.proxy.rlwy.net',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://metro.proxy.rlwy.net',

]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",       # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8000",       # Django local
    "http://127.0.0.1:8000",
    "https://tripleastechng.com",  # Production domain
    "https://www.tripleastechng.com",
    "https://crossover.proxy.rlwy.net",  # Your Railway proxy
    "https://metro.proxy.rlwy.net",
]



# Application definition


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main_app',
    'corsheaders',
    'rest_framework',
    'cloudinary_storage',
    'cloudinary',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add this
    'corsheaders.middleware.CorsMiddleware',  # Move above CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


AUTH_USER_MODEL = "main_app.CustomUser"

AUTHENTICATION_BACKENDS = [
    "main_app.backends.UsernameOrEmailBackend",  # custom backend
    "django.contrib.auth.backends.ModelBackend", # fallback
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}


# Cloudinary storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

import cloudinary
if CLOUDINARY_URL := os.environ.get("CLOUDINARY_URL"):
    cloudinary.config(cloudinary_url=CLOUDINARY_URL, secure=True)



# Where to redirect when a login is required
LOGIN_URL = '/login/'  # Change this to your React login URL if needed

# Where to go after login (optional)
LOGIN_REDIRECT_URL = '/'


ROOT_URLCONF = 'main_project.urls'


FRONTEND_DIR = BASE_DIR / 'reat_project' / 'build'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [FRONTEND_DIR] if FRONTEND_DIR.exists() else [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]





WSGI_APPLICATION = 'main_project.wsgi.application'



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'seunakanni417@gmail.com'
EMAIL_HOST_PASSWORD = 'nmxwcdumiwjwccyr'
DEFAULT_FROM_EMAIL = 'Triple A,s Support <support.royeane@yahoo.com>'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

import dj_database_url
from urllib.parse import urlparse

SECRET_KEY = os.environ.get("SECRET_KEY", "unsafe-dev-key")

db_url = os.environ.get("DATABASE_URL", f"sqlite:///{BASE_DIR / 'db.sqlite3'}")

# ðŸ”‘ Detect Railway internal environment
if os.environ.get("RAILWAY_ENVIRONMENT") or os.environ.get("RAILWAY_STATIC_URL"):
    # Replace public proxy with internal host
    db_url = db_url.replace("crossover.proxy.rlwy.net", "mysql.railway.internal")
    db_url = db_url.replace("metro.proxy.rlwy.net", "mysql.railway.internal")

DATABASES = {
    "default": dj_database_url.config(
        default=db_url,
        conn_max_age=600,
    )
}



# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": "my_triplea_ecommerce_db",
#         "USER": "triple_user",
#         "PASSWORD": "oluwaseun123$",
#         "HOST": "localhost",
#         "PORT": "3306",
#         "OPTIONS": {
#             "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
#         },
#     }
# }








# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

import pymysql
pymysql.install_as_MySQLdb()


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True




# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# React static files
FRONTEND_STATIC_DIR = BASE_DIR / "reat_project" / "build" / "static"
STATICFILES_DIRS = [FRONTEND_STATIC_DIR]

# WhiteNoise for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MEDIA_URL = '/media/'


# Logging config to avoid startup errors
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}

