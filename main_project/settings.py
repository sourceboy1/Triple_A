"""
Django settings for main_project project.

Generated by 'django-admin startproject' using Django 5.0.7.
"""
import pymysql
pymysql.install_as_MySQLdb()

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url
import cloudinary

BASE_DIR = Path(__file__).resolve().parent.parent

# React build directory
FRONTEND_DIR = BASE_DIR / 'reat_project' / 'build'

# Load environment variables
load_dotenv(BASE_DIR / ".env")
load_dotenv(BASE_DIR / ".env.local", override=True)

# SECRET_KEY and DEBUG
SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key-for-local-dev-if-env-missing")
DEBUG = os.getenv("DEBUG", "False").lower() == "true"

# Maintenance mode
MAINTENANCE_MODE = os.getenv("MAINTENANCE_MODE", "off").lower() == "on"
CORS_ALLOW_CREDENTIALS = True

# Hosts
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']
else:
    ALLOWED_HOSTS = [
        'tripleastechng.com',
        'www.tripleastechng.com',
        'crossover.proxy.rlwy.net',
        'metro.proxy.rlwy.net',
    ]

# CSRF Trusted Origins
if DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8000',
        'http://127.0.0.1:8000',
        'http://localhost:3000',
        'http://127.0.0.1:3000',
    ]
else:
    CSRF_TRUSTED_ORIGINS = [
        'https://tripleastechng.com',
        'https://www.tripleastechng.com',
        'https://crossover.proxy.rlwy.net',
        'https://metro.proxy.rlwy.net',
    ]

# CORS allowed origins
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
else:
    CORS_ALLOWED_ORIGINS = [
        "https://tripleastechng.com",
        "https://www.tripleastechng.com",
        "https://crossover.proxy.rlwy.net",
        "https://metro.proxy.rlwy.net",
    ]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main_app',
    'corsheaders',
    'rest_framework',
    'cloudinary_storage',
    'cloudinary',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Serves static files in production
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "main_app.middleware.MaintenanceModeMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = "main_app.CustomUser"
AUTHENTICATION_BACKENDS = [
    "main_app.backends.UsernameOrEmailBackend",
    "django.contrib.auth.backends.ModelBackend",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# Cloudinary storage
if DEBUG:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
else:
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
    if CLOUDINARY_URL := os.environ.get("CLOUDINARY_URL"):
        cloudinary.config(cloudinary_url=CLOUDINARY_URL, secure=True)

# Login redirect
LOGIN_URL = '/signin'
LOGIN_REDIRECT_URL = '/'

ROOT_URLCONF = 'main_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [FRONTEND_DIR] if FRONTEND_DIR.exists() else [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main_project.wsgi.application'

# Email config
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Database configuration
if DEBUG:
    # Local DB (commented out for production build)
    # DATABASES = {
    #     "default": {
    #         "ENGINE": "django.db.backends.mysql",
    #         "NAME": "my_triplea_ecommerce_db",
    #         "USER": "triple_user",
    #         "PASSWORD": "oluwaseun123$",
    #         "HOST": "127.0.0.1",
    #         "PORT": "3306",
    #         "OPTIONS": {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"},
    #     }
    # }
    pass
else:
    DATABASE_URL = os.environ.get("DATABASE_URL") or os.environ.get("MYSQL_PUBLIC_URL")
    DATABASES = {
        "default": dj_database_url.parse(DATABASE_URL, conn_max_age=600) # type: ignore
    }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
FRONTEND_STATIC_DIR = BASE_DIR / "reat_project" / "build" / "static"
STATICFILES_DIRS = [FRONTEND_STATIC_DIR]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {"format": "[{levelname}] {asctime} {name} {message}", "style": "{"},
        "simple": {"format": "[{levelname}] {message}", "style": "{"},
    },
    "handlers": {"console": {"class": "logging.StreamHandler", "formatter": "simple"}},
    "root": {"handlers": ["console"], "level": "INFO"},
}
